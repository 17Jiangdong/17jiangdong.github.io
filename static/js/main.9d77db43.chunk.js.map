{"version":3,"sources":["components/NavBar.js","components/Map.js","routes.js","components/Home.js","App.js","serviceWorker.js","index.js","doudou_image.jpg"],"names":["NavBar","className","Item","href","Map","useState","latitude","longitude","width","height","zoom","viewport","setViewport","mapboxApiAccessToken","mapStyle","onViewportChange","BaseRouter","exact","path","component","Home","src","doudou_image","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"+KAaeA,EATA,WACb,OACE,kBAAC,IAAD,CAAYC,UAAU,UACpB,kBAAC,IAAWC,KAAZ,KAAiB,uBAAGD,UAAU,WAAWE,KAAK,gBAA7B,SACjB,kBAAC,IAAWD,KAAZ,KAAiB,uBAAGD,UAAU,WAAWE,KAAK,gBAA7B,U,gCCJR,SAASC,IAAO,IAAD,EACIC,mBAAS,CACvCC,SAAU,QACVC,UAAW,SACXC,MAAO,OACPC,OAAQ,QACRC,KAAM,IANoB,mBACrBC,EADqB,KACXC,EADW,KAS5B,OACE,yBAAKX,UAAU,OACb,kBAAC,IAAD,iBACMU,EADN,CAEEE,qBAAsB,iGACtBC,SAAS,wDACTC,iBAAkB,SAAAJ,GAChBC,EAAYD,QCftB,IAMeK,EANI,kBACjB,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWf,M,iBCJzB,SAASgB,IACtB,OACE,yBAAKnB,UAAU,QACb,4BAAQA,UAAU,eAChB,0EAGA,yBAAKoB,IAAKC,IAAcrB,UAAU,YAAYsB,IAAI,SAClD,4ECUOC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACJ,EAAD,MACA,kBAAChB,EAAD,QCJcqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.9d77db43.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Breadcrumb } from 'antd';\r\n\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <Breadcrumb className=\"Navbar\">\r\n      <Breadcrumb.Item><a className=\"Nav-link\" href=\"/yujiangdong\">Home</a></Breadcrumb.Item>\r\n      <Breadcrumb.Item><a className=\"Nav-link\" href=\"/yujiangdong\">Map</a></Breadcrumb.Item>\r\n    </Breadcrumb>\r\n  );\r\n}\r\n\r\nexport default NavBar;","\r\nimport React, { useState } from \"react\";\r\nimport ReactMapGL from \"react-map-gl\";\r\n\r\nexport default function Map() {\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 31.2519,\r\n    longitude: 121.5029,\r\n    width: \"90vw\",\r\n    height: \"100vh\",\r\n    zoom: 8\r\n  });\r\n\r\n  return (\r\n    <div className=\"Map\">\r\n      <ReactMapGL\r\n        {...viewport}\r\n        mapboxApiAccessToken={\"pk.eyJ1IjoiMTdqaWFuZ2RvbmciLCJhIjoiY2tkM2lhN25nMDZ6YTJzcW04MnpqY2lqMiJ9.152tiC99k195OvQdglOKvw\"}\r\n        mapStyle=\"mapbox://styles/17jiangdong/ckd3ki5v705lu1imhthe5tpny\"\r\n        onViewportChange={viewport => {\r\n          setViewport(viewport);\r\n        }}\r\n      >\r\n      </ReactMapGL>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport Map from './components/Map';\r\n\r\n\r\nconst BaseRouter = () => (\r\n  <div>\r\n    <Route exact path='/map' component={Map} />\r\n  </div>\r\n);\r\n\r\nexport default BaseRouter;","import React from 'react';\r\nimport doudou_image from '../doudou_image.jpg';\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div className=\"Home\">\r\n      <header className=\"Home-header\">\r\n        <p>\r\n          小狗狗想小猫猫.\r\n        </p>\r\n        <img src={doudou_image} className=\"Home-logo\" alt=\"logo\" />\r\n        <p>\r\n          小猫猫和小狗狗.\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport BaseRouter from './routes'\nimport Home from './components/Home'\nimport Map from './components/Map'\n\n\nfunction App() {\n  return (\n    <Router>\n      <NavBar>\n        <BaseRouter />\n      </NavBar>\n      <Home />\n      <Map />\n    </Router >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/doudou_image.27d769bb.jpg\";"],"sourceRoot":""}